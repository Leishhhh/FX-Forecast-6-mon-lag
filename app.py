# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17P46mg54QDgvNI4FMMWA6KexXqMJOHEn
"""

import streamlit as st
import pandas as pd
import numpy as np
from pandas.tseries.offsets import DateOffset
import statsmodels.api as sm
import pickle

# --- Load saved model and preprocessing objects ---
with open("fx_model_sm.pkl", "rb") as f:
    saved_objects = pickle.load(f)

model_sm = saved_objects['model']
scaler = saved_objects['scaler']
pca = saved_objects['pca']

# --- Preprocessing function ---
def preprocess_new_row(row, scaler, pca):
    row = row.copy()
    row['log_GOLD'] = np.log(row['Gold_lagged'])
    row = row.drop(columns=['Gold_lagged'])

    # scaling + PCA
    X_scaled = scaler.transform(row)
    X_pca = pca.transform(X_scaled)

    # convert to dataframe with same number of PCs
    X_pca_df = pd.DataFrame(X_pca, columns=[f'PC{i+1}' for i in range(X_pca.shape[1])])

    # add constant
    X_pca_df = sm.add_constant(X_pca_df, has_constant="add")
    X_pca_df = X_pca_df.reset_index(drop=True)

    return X_pca_df


# --- Streamlit UI ---
st.title("FX - USD/INR Rate Predictor (6 Months Lag Model")

# ✅ Correct GitHub raw link
url = "https://raw.githubusercontent.com/Leishhhh/FX-Forescast-app/main/One%20Year%20Lag%20Model%20FX%20Rates%20Data.csv"

@st.cache_data
def load_data_from_github():
    try:
        df = pd.read_csv(url, encoding="utf-8-sig")  # try CSV first
    except:
        df = pd.read_csv(url, sep="\t", encoding="utf-8-sig")  # fallback TSV

    # Clean column names
    df.columns = df.columns.str.strip().str.replace("\ufeff", "", regex=True)

    # Parse dates if Date column exists
    if "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"], dayfirst=True, errors="coerce")

    return df


# Option B: File uploader
uploaded_file = st.file_uploader("Or upload your CSV/TSV file", type=["csv", "tsv"])

if uploaded_file is not None:
    # ✅ handle both csv and tsv
    try:
        df = pd.read_csv(uploaded_file, parse_dates=['Date'], dayfirst=True)
    except:
        df = pd.read_csv(uploaded_file, sep="\t", parse_dates=['Date'], dayfirst=True)
else:
    df = load_data_from_github()

# --- Clean & prepare data ---
df = df.sort_values('Date').reset_index(drop=True)

# Rename columns safely
rename_map = {
    "CPI": "CPI_lag1",
    "Nifty 50 (NSEI)": "Nifty_lagged",
    "Refined Gold Futures": "Gold_lagged"
}
df = df.rename(columns={k: v for k, v in rename_map.items() if k in df.columns})

# --- Date input ---
user_date = st.date_input("Select a date:")
lag_date = pd.to_datetime(user_date) - DateOffset(months=6)   # ✅ corrected to 6 months

if lag_date in df['Date'].values:
    lagged_row = df.loc[df['Date'] == lag_date, ['CPI_lag1','Nifty_lagged','Gold_lagged']].copy()

    # Preprocess and predict
    X_new = preprocess_new_row(lagged_row, scaler, pca)
    pred_sm = model_sm.get_prediction(X_new)
    pred_summary = pred_sm.summary_frame(alpha=0.05)

    pred_fx = pred_summary['mean'].values[0]
    ci_lower = pred_summary['mean_ci_lower'].values[0]
    ci_upper = pred_summary['mean_ci_upper'].values[0]

    st.success(f"Predicted FX Rate on {user_date}: {pred_fx:.2f}")
    st.info(f"95% Confidence Interval: [{ci_lower:.2f}, {ci_upper:.2f}]")
else:
    st.warning("Lagged data (6 months prior) not available for this date.")